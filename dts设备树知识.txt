设备树的组成：由一系列被命名的节点和属性组成，而节点本身可包含子节点。
设备树是一种描述硬件的数据结构,采用设备树，许多硬件的细节可以直接通过它传递给Linux，而不再需要在内核中进行大量的冗余编码ARM Linux设备树的学习

设备树所描述的信息包括：
CPU的数量和类别。
内存基地址和大小。
总线和桥。
外设连接。
中断控制器和中断使用情况。
GPIO控制器和GPIO使用情况。
时钟控制器和时钟使用情况。

*.dts文件是一种ASCII文本对Device Tree的描述，放置在内核的/arch/arm/boot/dts目录。一般而言，一个*.dts文件对应一个ARM的machine。

*.dtsi文件作用：由于一个SOC可能有多个不同的电路板，而每个电路板拥有一个 *.dts。这些dts势必会存在许多共同部分，为了减少代码的冗余，设备树将这些共同部分提炼保存在*.dtsi文件中，供不同的dts共同使用。*.dtsi的使用方法，类似于C语言的头文件，在dts文件中需要进行include *.dtsi文件。当然，dtsi本身也支持include 另一个dtsi文件。

DTC为编译工具，它可以将.dts文件编译成.dtb文件。DTC的源码位于内核的scripts/dtc目录。

DTC编译*.dts生成的二进制文件(*.dtb)，bootloader在引导内核时，会预先读取*.dtb到内存，进而由内核解析。

Bootloader需要将设备树在内存中的地址传给内核。




设备树中dts、dtsi文件的基本语法：









interrupts
一个计算机系统中大量设备都是通过中断请求CPU服务的，所以设备节点中就需要在指定中断号。常用的属性有

interrupt-controller 一个空属性用来声明这个node接收中断信号
#interrupt-cells，是中断控制器节点的属性，用来标识这个控制器需要几个单位做中断描述符,用来描述子节点中"interrupts"属性使用了父节点中的interrupts属性的具体的哪个值。一般，如果父节点的该属性的值是3，则子节点的interrupts一个cell的三个32bits整数值分别为:<中断域 中断 触发方式>,如果父节点的该属性是2，则是<中断 触发方式>
interrupt-parent,标识此设备节点属于哪一个中断控制器，如果没有设置这个属性，会自动依附父节点的
interrupts,一个中断标识符列表，表示每一个中断输出信号

gpio
gpio也是最常见的IO口，常用的属性有

"gpio-controller"，用来说明该节点描述的是一个gpio控制器
"#gpio-cells"，用来描述gpio使用节点的属性一个cell的内容，即 属性 = <&引用GPIO节点别名 GPIO标号 工作模式>


属性和子节点的含义必须存档在 binding 文档中，以便设备驱动程序的程序员知道如何解释这些数据。一个 binding 记录了一个特定 compatible 值的意义、应该包含什么样的属性、有可能包含那些子节点、以及它代表了什么样的设备。每个特别的 compatible 值都应该有一个它自己的 binding（或者要求与其他 compatible 值兼容）。新设备的 binding 存档在本 wiki 中。请查看主页上的文档格式描述和审核流程。















